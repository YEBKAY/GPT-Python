<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Simple Blackjack Game</title>
    <style>
        body {
            background-color: #2E7D32;
            color: white;
            font-family: Arial, sans-serif;
            text-align: center;
            padding: 20px;
        }
        .game-container {
            max-width: 600px;
            margin: 0 auto;
            background-color: #388E3C;
            padding: 20px;
            border-radius: 10px;
        }
        .hand {
            margin: 20px 0;
        }
        .hand-title {
            font-size: 1.2em;
            margin-bottom: 10px;
        }
        .cards {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
        }
        .card {
            background-color: white;
            color: black;
            border-radius: 5px;
            width: 60px;
            height: 90px;
            margin: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1em;
            box-shadow: 2px 2px 5px rgba(0,0,0,0.5);
        }
        .controls {
            margin: 20px 0;
        }
        button {
            padding: 10px 20px;
            margin: 0 10px;
            font-size: 1em;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        button:hover {
            opacity: 0.8;
        }
        #hit-button {
            background-color: #FFA000;
            color: white;
        }
        #stand-button {
            background-color: #D32F2F;
            color: white;
        }
        #restart-button {
            background-color: #1976D2;
            color: white;
            display: none;
        }
        .message {
            font-size: 1.2em;
            margin: 20px 0;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1>Blackjack</h1>

        <div class="hand" id="dealer-hand">
            <div class="hand-title">Dealer's Hand</div>
            <div class="cards" id="dealer-cards"></div>
            <div id="dealer-score"></div>
        </div>

        <div class="hand" id="player-hand">
            <div class="hand-title">Your Hand</div>
            <div class="cards" id="player-cards"></div>
            <div id="player-score"></div>
        </div>

        <div class="controls">
            <button id="hit-button">Hit</button>
            <button id="stand-button">Stand</button>
            <button id="restart-button">Restart</button>
        </div>

        <div class="message" id="message"></div>
    </div>

    <script>
        // Game variables
        let deck = [];
        let playerHand = [];
        let dealerHand = [];
        let gameOver = false;

        // DOM elements
        const dealerCardsDiv = document.getElementById('dealer-cards');
        const playerCardsDiv = document.getElementById('player-cards');
        const dealerScoreDiv = document.getElementById('dealer-score');
        const playerScoreDiv = document.getElementById('player-score');
        const messageDiv = document.getElementById('message');
        const hitButton = document.getElementById('hit-button');
        const standButton = document.getElementById('stand-button');
        const restartButton = document.getElementById('restart-button');

        // Initialize the game
        function initGame() {
            deck = createDeck();
            shuffleDeck(deck);
            playerHand = [];
            dealerHand = [];
            gameOver = false;
            messageDiv.textContent = '';
            hitButton.style.display = 'inline-block';
            standButton.style.display = 'inline-block';
            restartButton.style.display = 'none';

            // Deal initial two cards to player and dealer
            playerHand.push(drawCard());
            dealerHand.push(drawCard());
            playerHand.push(drawCard());
            dealerHand.push(drawCard());

            updateUI();
            checkInitialBlackjack();
        }

        // Create a standard 52-card deck
        function createDeck() {
            const suits = ['â™ ', 'â™¥', 'â™¦', 'â™£'];
            const values = [
                { name: 'A', value: 11 },
                { name: '2', value: 2 },
                { name: '3', value: 3 },
                { name: '4', value: 4 },
                { name: '5', value: 5 },
                { name: '6', value: 6 },
                { name: '7', value: 7 },
                { name: '8', value: 8 },
                { name: '9', value: 9 },
                { name: '10', value: 10 },
                { name: 'J', value: 10 },
                { name: 'Q', value: 10 },
                { name: 'K', value: 10 },
            ];
            const deck = [];
            for (let suit of suits) {
                for (let val of values) {
                    deck.push({ name: val.name, suit: suit, value: val.value });
                }
            }
            return deck;
        }

        // Shuffle the deck using Fisher-Yates algorithm
        function shuffleDeck(deck) {
            for (let i = deck.length -1; i >0; i--) {
                const j = Math.floor(Math.random() * (i +1));
                [deck[i], deck[j]] = [deck[j], deck[i]];
            }
        }

        // Draw a card from the deck
        function drawCard() {
            return deck.pop();
        }

        // Calculate the total value of a hand
        function calculateScore(hand) {
            let total = 0;
            let aces = 0;
            for (let card of hand) {
                total += card.value;
                if (card.name === 'A') aces += 1;
            }
            // Adjust for Aces
            while (total > 21 && aces > 0) {
                total -= 10;
                aces -= 1;
            }
            return total;
        }

        // Update the User Interface
        function updateUI() {
            // Clear existing cards
            dealerCardsDiv.innerHTML = '';
            playerCardsDiv.innerHTML = '';

            // Display dealer's cards
            for (let i = 0; i < dealerHand.length; i++) {
                const card = dealerHand[i];
                const cardDiv = document.createElement('div');
                cardDiv.classList.add('card');
                // Hide dealer's second card if game is not over
                if (i === 1 && !gameOver) {
                    cardDiv.textContent = 'ðŸ‚ '; // Card back symbol
                } else {
                    cardDiv.textContent = `${card.name}${card.suit}`;
                }
                dealerCardsDiv.appendChild(cardDiv);
            }

            // Display player's cards
            for (let card of playerHand) {
                const cardDiv = document.createElement('div');
                cardDiv.classList.add('card');
                cardDiv.textContent = `${card.name}${card.suit}`;
                playerCardsDiv.appendChild(cardDiv);
            }

            // Update scores
            if (gameOver) {
                dealerScoreDiv.textContent = `Score: ${calculateScore(dealerHand)}`;
            } else {
                dealerScoreDiv.textContent = `Score: ${calculateScore(dealerHand[0])} + ?`;
            }
            playerScoreDiv.textContent = `Score: ${calculateScore(playerHand)}`;
        }

        // Handle Hit action
        hitButton.addEventListener('click', () => {
            if (gameOver) return;
            playerHand.push(drawCard());
            updateUI();
            const playerScore = calculateScore(playerHand);
            if (playerScore > 21) {
                endGame('You busted! Dealer wins.');
            } else if (playerScore === 21) {
                endGame('You hit 21! Let\'s see what the dealer has.');
                standButton.click();
            }
        });

        // Handle Stand action
        standButton.addEventListener('click', () => {
            if (gameOver) return;
            gameOver = true;
            // Reveal dealer's hidden card
            updateUI();
            // Dealer draws until reaching at least 17
            let dealerScore = calculateScore(dealerHand);
            while (dealerScore < 17) {
                dealerHand.push(drawCard());
                dealerScore = calculateScore(dealerHand);
            }
            updateUI();
            determineWinner();
        });

        // Handle Restart action
        restartButton.addEventListener('click', () => {
            initGame();
        });

        // Determine the winner
        function determineWinner() {
            const playerScore = calculateScore(playerHand);
            const dealerScore = calculateScore(dealerHand);

            if (dealerScore > 21) {
                endGame('Dealer busted! You win!');
            } else if (dealerScore > playerScore) {
                endGame('Dealer wins!');
            } else if (dealerScore < playerScore) {
                endGame('You win!');
            } else {
                endGame('It\'s a tie!');
            }
        }

        // End the game with a message
        function endGame(msg) {
            messageDiv.textContent = msg;
            hitButton.style.display = 'none';
            standButton.style.display = 'none';
            restartButton.style.display = 'inline-block';
            updateUI();
        }

        // Check for initial blackjack
        function checkInitialBlackjack() {
            const playerScore = calculateScore(playerHand);
            const dealerScore = calculateScore(dealerHand);
            if (playerScore === 21 && dealerScore === 21) {
                endGame('Both have Blackjack! It\'s a tie!');
            } else if (playerScore === 21) {
                endGame('Blackjack! You win!');
            } else if (dealerScore === 21) {
                endGame('Dealer has Blackjack! Dealer wins.');
            }
        }

        // Start the game when the page loads
        window.onload = initGame;
    </script>
</body>
</html>
