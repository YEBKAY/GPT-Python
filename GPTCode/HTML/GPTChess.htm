<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Chess AI Self-Play with Controlled Queen Promotion, Scoreboard, Predicted Move, and Restart Button</title>
    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            background-color: #f0d9b5;
            margin: 0;
        }
        #chessboard {
            display: grid;
            grid-template-columns: repeat(8, 60px);
            grid-template-rows: repeat(8, 60px);
            border: 2px solid #333;
        }
        .cell {
            width: 60px;
            height: 60px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 36px;
            user-select: none;
            position: relative;
        }
        .white {
            background-color: #f0d9b5;
        }
        .black {
            background-color: #b58863;
        }
        .highlight {
            outline: 3px solid yellow;
        }
        #status, #scoreboard {
            margin-top: 20px;
            font-size: 20px;
            font-weight: bold;
            text-align: center;
        }
        #scoreboard {
            display: flex;
            gap: 20px;
        }
        #restartButton {
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 16px;
            font-weight: bold;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        #restartButton:hover {
            background-color: #45a049;
        }
    </style>
</head>
<body>
    <div id="chessboard"></div>
    <div id="status">Initializing...</div>
    <div id="scoreboard">
        <div>White Wins: <span id="whiteScore">0</span></div>
        <div>Black Wins: <span id="blackScore">0</span></div>
    </div>
    <button id="restartButton">Restart Game</button>

    <script>
        // Unicode Characters for Chess Pieces
        const pieces = {
            white: {
                king: '♔',
                queen: '♕',
                rook: '♖',
                bishop: '♗',
                knight: '♘',
                pawn: '♙'
            },
            black: {
                king: '♚',
                queen: '♛',
                rook: '♜',
                bishop: '♝',
                knight: '♞',
                pawn: '♟'
            }
        };

        // Original Queen Positions
        const originalQueenPositions = {
            white: { row: 7, col: 3 }, // d1 in 0-indexed
            black: { row: 0, col: 3 }  // d8 in 0-indexed
        };

        // Initial Board Setup
        const initialBoard = [
            [pieces.black.rook, pieces.black.knight, pieces.black.bishop, pieces.black.queen, pieces.black.king, pieces.black.bishop, pieces.black.knight, pieces.black.rook],
            [pieces.black.pawn, pieces.black.pawn, pieces.black.pawn, pieces.black.pawn, pieces.black.pawn, pieces.black.pawn, pieces.black.pawn, pieces.black.pawn],
            [null, null, null, null, null, null, null, null],
            [null, null, null, null, null, null, null, null],
            [null, null, null, null, null, null, null, null],
            [null, null, null, null, null, null, null, null],
            [pieces.white.pawn, pieces.white.pawn, pieces.white.pawn, pieces.white.pawn, pieces.white.pawn, pieces.white.pawn, pieces.white.pawn, pieces.white.pawn],
            [pieces.white.rook, pieces.white.knight, pieces.white.bishop, pieces.white.queen, pieces.white.king, pieces.white.bishop, pieces.white.knight, pieces.white.rook]
        ];

        let board = JSON.parse(JSON.stringify(initialBoard)); // Deep copy of initial board
        let currentPlayer = 'white';
        let gameOver = false;
        const boardElement = document.getElementById('chessboard');
        const statusElement = document.getElementById('status');
        const whiteScoreElement = document.getElementById('whiteScore');
        const blackScoreElement = document.getElementById('blackScore');
        const restartButton = document.getElementById('restartButton');

        // Score Counters
        let whiteScore = 0;
        let blackScore = 0;

        // Timeout IDs for Managing Moves
        let predictedMoveTimeout = null;
        let aiMoveTimeout = null;
        let resetTimeout = null;

        // Function to Render the Chessboard
        function renderBoard() {
            boardElement.innerHTML = '';
            for (let row = 0; row < 8; row++) {
                for (let col = 0; col < 8; col++) {
                    const cell = document.createElement('div');
                    cell.classList.add('cell');
                    cell.classList.add((row + col) % 2 === 0 ? 'white' : 'black');
                    cell.textContent = board[row][col] || '';
                    cell.dataset.row = row;
                    cell.dataset.col = col;
                    boardElement.appendChild(cell);
                }
            }
        }

        // Utility Functions to Determine Piece Color
        function isWhite(piece) {
            return Object.values(pieces.white).includes(piece);
        }

        function isBlack(piece) {
            return Object.values(pieces.black).includes(piece);
        }

        // Function to Check if Original Queen is Alive
        function isOriginalQueenAlive(player) {
            const queenPos = originalQueenPositions[player];
            const expectedQueen = player === 'white' ? pieces.white.queen : pieces.black.queen;
            return board[queenPos.row][queenPos.col] === expectedQueen;
        }

        // Function to Check if Any Queen Exists for a Player
        function hasAnyQueen(player) {
            const queen = player === 'white' ? pieces.white.queen : pieces.black.queen;
            for (let row = 0; row < 8; row++) {
                for (let col = 0; col < 8; col++) {
                    if (board[row][col] === queen) {
                        return true;
                    }
                }
            }
            return false;
        }

        // Function to Get All Possible Moves for the Current Player
        function getAllPossibleMoves(player) {
            const moves = [];
            for (let row = 0; row < 8; row++) {
                for (let col = 0; col < 8; col++) {
                    const piece = board[row][col];
                    if (piece && ((player === 'white' && isWhite(piece)) || (player === 'black' && isBlack(piece)))) {
                        const pieceMoves = getPieceMoves(row, col, piece);
                        pieceMoves.forEach(move => {
                            moves.push({ from: [row, col], to: move });
                        });
                    }
                }
            }
            return moves;
        }

        // Function to Get Possible Moves for a Specific Piece
        function getPieceMoves(row, col, piece) {
            const moves = [];
            const directions = {
                // Directions are in [rowOffset, colOffset]
                [pieces.white.pawn]: [[-1, 0], [-1, -1], [-1, 1]],
                [pieces.black.pawn]: [[1, 0], [1, -1], [1, 1]],
                [pieces.white.rook]: [[-1, 0], [1, 0], [0, -1], [0, 1]],
                [pieces.black.rook]: [[-1, 0], [1, 0], [0, -1], [0, 1]],
                [pieces.white.knight]: [
                    [-2, -1], [-2, 1], [-1, -2], [-1, 2],
                    [1, -2], [1, 2], [2, -1], [2, 1]
                ],
                [pieces.black.knight]: [
                    [-2, -1], [-2, 1], [-1, -2], [-1, 2],
                    [1, -2], [1, 2], [2, -1], [2, 1]
                ],
                [pieces.white.bishop]: [[-1, -1], [-1, 1], [1, -1], [1, 1]],
                [pieces.black.bishop]: [[-1, -1], [-1, 1], [1, -1], [1, 1]],
                [pieces.white.queen]: [
                    [-1, 0], [1, 0], [0, -1], [0, 1],
                    [-1, -1], [-1, 1], [1, -1], [1, 1]
                ],
                [pieces.black.queen]: [
                    [-1, 0], [1, 0], [0, -1], [0, 1],
                    [-1, -1], [-1, 1], [1, -1], [1, 1]
                ],
                [pieces.white.king]: [
                    [-1, 0], [1, 0], [0, -1], [0, 1],
                    [-1, -1], [-1, 1], [1, -1], [1, 1]
                ],
                [pieces.black.king]: [
                    [-1, 0], [1, 0], [0, -1], [0, 1],
                    [-1, -1], [-1, 1], [1, -1], [1, 1]
                ]
            };

            const isSliding = [
                pieces.white.rook, pieces.black.rook,
                pieces.white.bishop, pieces.black.bishop,
                pieces.white.queen, pieces.black.queen
            ].includes(piece);

            const dirs = directions[piece] || [];

            dirs.forEach(dir => {
                let r = row + dir[0];
                let c = col + dir[1];
                while (r >= 0 && r < 8 && c >= 0 && c < 8) {
                    const target = board[r][c];
                    if (target === null) {
                        moves.push([r, c]);
                    } else {
                        if ((isWhite(piece) && isBlack(target)) || (isBlack(piece) && isWhite(target))) {
                            moves.push([r, c]);
                        }
                        break; // Cannot jump over pieces
                    }
                    if (!isSliding) break; // Non-sliding pieces move only one square
                    r += dir[0];
                    c += dir[1];
                }
            });

            // Pawn-specific logic for double moves and captures
            if (piece === pieces.white.pawn || piece === pieces.black.pawn) {
                const dir = piece === pieces.white.pawn ? -1 : 1;
                const startRow = piece === pieces.white.pawn ? 6 : 1;

                // Single forward move
                let forwardRow = row + dir;
                if (forwardRow >= 0 && forwardRow < 8 && board[forwardRow][col] === null) {
                    moves.push([forwardRow, col]);

                    // Double forward move from starting position
                    if (row === startRow) {
                        let doubleForwardRow = forwardRow + dir;
                        if (doubleForwardRow >= 0 && doubleForwardRow < 8 && board[doubleForwardRow][col] === null) {
                            moves.push([doubleForwardRow, col]);
                        }
                    }
                }

                // Captures
                [[dir, -1], [dir, 1]].forEach(offset => {
                    let captureRow = row + offset[0];
                    let captureCol = col + offset[1];
                    if (captureRow >= 0 && captureRow < 8 && captureCol >= 0 && captureCol < 8) {
                        const target = board[captureRow][captureCol];
                        if (target && ((isWhite(piece) && isBlack(target)) || (isBlack(piece) && isWhite(target)))) {
                            moves.push([captureRow, captureCol]);
                        }
                    }
                });

                // Note: En passant and comprehensive promotion options are not implemented in this basic version
            }

            return moves;
        }

        // Function to Execute a Move
        function makeMove(move) {
            const [fromRow, fromCol] = move.from;
            const [toRow, toCol] = move.to;
            const piece = board[fromRow][fromCol];
            const target = board[toRow][toCol];

            // Move the piece
            board[toRow][toCol] = piece;
            board[fromRow][fromCol] = null;

            // Handle pawn promotion
            if (piece === pieces.white.pawn && toRow === 0) {
                if (!isOriginalQueenAlive('white') && !hasAnyQueen('white')) {
                    board[toRow][toCol] = pieces.white.queen;
                    statusElement.textContent += ` (Promoted to Queen)`;
                } else {
                    board[toRow][toCol] = pieces.white.rook; // Promote to rook if queen is already present
                    statusElement.textContent += ` (Promoted to Rook)`;
                }
            }
            if (piece === pieces.black.pawn && toRow === 7) {
                if (!isOriginalQueenAlive('black') && !hasAnyQueen('black')) {
                    board[toRow][toCol] = pieces.black.queen;
                    statusElement.textContent += ` (Promoted to Queen)`;
                } else {
                    board[toRow][toCol] = pieces.black.rook; // Promote to rook if queen is already present
                    statusElement.textContent += ` (Promoted to Rook)`;
                }
            }
        }

        // Function to Check for Win Condition (King Capture)
        function checkWinCondition() {
            let whiteKingExists = false;
            let blackKingExists = false;

            for (let row = 0; row < 8; row++) {
                for (let col = 0; col < 8; col++) {
                    const piece = board[row][col];
                    if (piece === pieces.white.king) {
                        whiteKingExists = true;
                    }
                    if (piece === pieces.black.king) {
                        blackKingExists = true;
                    }
                }
            }

            if (!whiteKingExists && !blackKingExists) {
                statusElement.textContent = `Both kings have been captured! It's a draw!`;
                gameOver = true;
                return 'draw';
            } else if (!whiteKingExists) {
                statusElement.textContent = `Black wins! White's king has been captured.`;
                blackScore++;
                blackScoreElement.textContent = blackScore;
                gameOver = true;
                return 'black';
            } else if (!blackKingExists) {
                statusElement.textContent = `White wins! Black's king has been captured.`;
                whiteScore++;
                whiteScoreElement.textContent = whiteScore;
                gameOver = true;
                return 'white';
            }

            return null; // No win condition met
        }

        // Function to Reset the Board for a New Game
        function resetBoard() {
            // Clear all existing timeouts to prevent overlapping games
            if (predictedMoveTimeout) {
                clearTimeout(predictedMoveTimeout);
                predictedMoveTimeout = null;
            }
            if (aiMoveTimeout) {
                clearTimeout(aiMoveTimeout);
                aiMoveTimeout = null;
            }
            if (resetTimeout) {
                clearTimeout(resetTimeout);
                resetTimeout = null;
            }

            board = JSON.parse(JSON.stringify(initialBoard)); // Reset to initial board
            currentPlayer = 'white';
            gameOver = false;
            renderBoard();
            statusElement.textContent = `White is making the first move...`;
            aiMoveTimeout = setTimeout(aiMove, 100); // Start next game quickly after reset
        }

        // Function to Highlight Cells Involved in the Predicted Move
        function highlightMove(move) {
            const [fromRow, fromCol] = move.from;
            const [toRow, toCol] = move.to;
            const fromCell = document.querySelector(`.cell[data-row='${fromRow}'][data-col='${fromCol}']`);
            const toCell = document.querySelector(`.cell[data-row='${toRow}'][data-col='${toCol}']`);
            if (fromCell) fromCell.classList.add('highlight');
            if (toCell) toCell.classList.add('highlight');
            return { fromCell, toCell };
        }

        // Function to Remove Highlight from Cells
        function removeHighlight(highlightedCells) {
            const { fromCell, toCell } = highlightedCells;
            if (fromCell) fromCell.classList.remove('highlight');
            if (toCell) toCell.classList.remove('highlight');
        }

        // Simple AI: Selects a Random Valid Move with Prediction
        function aiMove() {
            if (gameOver) {
                // Delay before starting the next game
                resetTimeout = setTimeout(resetBoard, 1000); // 1 second delay before new game
                return;
            }

            const moves = getAllPossibleMoves(currentPlayer);
            if (moves.length === 0) {
                const winner = currentPlayer === 'white' ? 'Black' : 'White';
                statusElement.textContent = `${winner} wins! ${capitalize(currentPlayer)} has no valid moves.`;
                if (winner === 'White') {
                    whiteScore++;
                    whiteScoreElement.textContent = whiteScore;
                } else {
                    blackScore++;
                    blackScoreElement.textContent = blackScore;
                }
                gameOver = true;
                resetTimeout = setTimeout(resetBoard, 1000); // 1 second delay before new game
                return;
            }

            // Select a random move
            const move = moves[Math.floor(Math.random() * moves.length)];

            // Highlight the predicted move
            const highlightedCells = highlightMove(move);

            // Update Status with Predicted Move
            statusElement.textContent = `AI predicts ${capitalize(currentPlayer)} will move from (${move.from[0]+1}, ${move.from[1]+1}) to (${move.to[0]+1}, ${move.to[1]+1})`;

            // Wait for 200ms before executing the move to show prediction
            predictedMoveTimeout = setTimeout(() => {
                // Remove highlight after prediction phase
                removeHighlight(highlightedCells);

                // Execute the move
                makeMove(move);
                renderBoard();

                // Check for win condition after the move
                const winResult = checkWinCondition();
                if (winResult) {
                    resetTimeout = setTimeout(resetBoard, 1000); // 1 second delay before new game
                    return;
                }

                // Update Status with Executed Move
                statusElement.textContent = `${capitalize(currentPlayer)} moved from (${move.from[0]+1}, ${move.from[1]+1}) to (${move.to[0]+1}, ${move.to[1]+1})`;

                // Switch Player
                currentPlayer = currentPlayer === 'white' ? 'black' : 'white';

                // Continue the game as fast as possible with minimal delay
                aiMoveTimeout = setTimeout(aiMove, 50); // 50ms delay between moves for faster gameplay
            }, 200); // 200ms delay to display predicted move
        }

        // Event Listener for Restart Button
        restartButton.addEventListener('click', () => {
            resetBoard();
        });

        // Helper Function to Capitalize Player Name
        function capitalize(word) {
            return word.charAt(0).toUpperCase() + word.slice(1);
        }

        // Start the Game
        renderBoard();
        statusElement.textContent = `White is making the first move...`;
        aiMoveTimeout = setTimeout(aiMove, 100); // Start the first game quickly
    </script>
</body>
</html>
