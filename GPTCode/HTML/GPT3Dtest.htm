<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Simple 3D World with Movable Player</title>
    <style>
        body { margin: 0; overflow: hidden; }
        canvas { display: block; }
    </style>
</head>
<body>
    <canvas id="glCanvas"></canvas>

    <script>
        // Vertex Shader Source
        const vertexShaderSource = `
            attribute vec3 aPosition;
            attribute vec3 aNormal;
            
            uniform mat4 uModelMatrix;
            uniform mat4 uViewMatrix;
            uniform mat4 uProjectionMatrix;
            uniform mat4 uNormalMatrix;
            
            varying vec3 vNormal;
            varying vec3 vFragPos;
            
            void main(void) {
                vFragPos = vec3(uModelMatrix * vec4(aPosition, 1.0));
                vNormal = mat3(uNormalMatrix) * aNormal;
                gl_Position = uProjectionMatrix * uViewMatrix * uModelMatrix * vec4(aPosition, 1.0);
            }
        `;

        // Fragment Shader Source
        const fragmentShaderSource = `
            precision mediump float;
            
            varying vec3 vNormal;
            varying vec3 vFragPos;
            
            uniform vec3 uLightPos;
            uniform vec3 uViewPos;
            uniform vec3 uLightColor;
            uniform vec3 uObjectColor;
            
            void main(void) {
                // Ambient
                float ambientStrength = 0.3;
                vec3 ambient = ambientStrength * uLightColor;
                
                // Diffuse
                vec3 norm = normalize(vNormal);
                vec3 lightDir = normalize(uLightPos - vFragPos);
                float diff = max(dot(norm, lightDir), 0.0);
                vec3 diffuse = diff * uLightColor;
                
                // Specular
                float specularStrength = 0.5;
                vec3 viewDir = normalize(uViewPos - vFragPos);
                vec3 reflectDir = reflect(-lightDir, norm);
                float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);
                vec3 specular = specularStrength * spec * uLightColor;
                
                vec3 result = (ambient + diffuse + specular) * uObjectColor;
                gl_FragColor = vec4(result, 1.0);
            }
        `;

        // Initialize WebGL Context
        const canvas = document.getElementById('glCanvas');
        const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');

        if (!gl) {
            alert('Unable to initialize WebGL. Your browser may not support it.');
        }

        // Resize Canvas to Full Window
        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
        }
        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();

        // Compile Shader
        function compileShader(gl, source, type) {
            const shader = gl.createShader(type);
            gl.shaderSource(shader, source);
            gl.compileShader(shader);

            if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
                console.error('An error occurred compiling the shaders:', gl.getShaderInfoLog(shader));
                gl.deleteShader(shader);
                return null;
            }

            return shader;
        }

        // Link Shaders into a Program
        function createProgram(gl, vertexShader, fragmentShader) {
            const program = gl.createProgram();
            gl.attachShader(program, vertexShader);
            gl.attachShader(program, fragmentShader);
            gl.linkProgram(program);

            if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
                console.error('Unable to initialize the shader program:', gl.getProgramInfoLog(program));
                gl.deleteProgram(program);
                return null;
            }

            return program;
        }

        // Create Shaders
        const vertexShader = compileShader(gl, vertexShaderSource, gl.VERTEX_SHADER);
        const fragmentShader = compileShader(gl, fragmentShaderSource, gl.FRAGMENT_SHADER);
        const shaderProgram = createProgram(gl, vertexShader, fragmentShader);

        // Get Attribute and Uniform Locations
        const programInfo = {
            attribLocations: {
                position: gl.getAttribLocation(shaderProgram, 'aPosition'),
                normal: gl.getAttribLocation(shaderProgram, 'aNormal'),
            },
            uniformLocations: {
                modelMatrix: gl.getUniformLocation(shaderProgram, 'uModelMatrix'),
                viewMatrix: gl.getUniformLocation(shaderProgram, 'uViewMatrix'),
                projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),
                normalMatrix: gl.getUniformLocation(shaderProgram, 'uNormalMatrix'),
                lightPos: gl.getUniformLocation(shaderProgram, 'uLightPos'),
                viewPos: gl.getUniformLocation(shaderProgram, 'uViewPos'),
                lightColor: gl.getUniformLocation(shaderProgram, 'uLightColor'),
                objectColor: gl.getUniformLocation(shaderProgram, 'uObjectColor'),
            },
        };

        // Define Geometry (Ground and Cube)
        const geometries = {
            ground: {
                positions: [
                    -50.0, 0.0, -50.0,
                     50.0, 0.0, -50.0,
                     50.0, 0.0,  50.0,
                    -50.0, 0.0,  50.0,
                ],
                normals: [
                    0.0, 1.0, 0.0,
                    0.0, 1.0, 0.0,
                    0.0, 1.0, 0.0,
                    0.0, 1.0, 0.0,
                ],
                indices: [
                    0, 1, 2,
                    0, 2, 3,
                ],
                color: [0.5, 0.8, 0.5],
            },
            cube: {
                positions: [
                    // Front face
                    -1.0, -1.0,  1.0,
                     1.0, -1.0,  1.0,
                     1.0,  1.0,  1.0,
                    -1.0,  1.0,  1.0,

                    // Back face
                    -1.0, -1.0, -1.0,
                    -1.0,  1.0, -1.0,
                     1.0,  1.0, -1.0,
                     1.0, -1.0, -1.0,

                    // Top face
                    -1.0,  1.0, -1.0,
                    -1.0,  1.0,  1.0,
                     1.0,  1.0,  1.0,
                     1.0,  1.0, -1.0,

                    // Bottom face
                    -1.0, -1.0, -1.0,
                     1.0, -1.0, -1.0,
                     1.0, -1.0,  1.0,
                    -1.0, -1.0,  1.0,

                    // Right face
                     1.0, -1.0, -1.0,
                     1.0,  1.0, -1.0,
                     1.0,  1.0,  1.0,
                     1.0, -1.0,  1.0,

                    // Left face
                    -1.0, -1.0, -1.0,
                    -1.0, -1.0,  1.0,
                    -1.0,  1.0,  1.0,
                    -1.0,  1.0, -1.0,
                ],
                normals: [
                    // Front
                    0.0, 0.0, 1.0,
                    0.0, 0.0, 1.0,
                    0.0, 0.0, 1.0,
                    0.0, 0.0, 1.0,

                    // Back
                    0.0, 0.0, -1.0,
                    0.0, 0.0, -1.0,
                    0.0, 0.0, -1.0,
                    0.0, 0.0, -1.0,

                    // Top
                    0.0, 1.0, 0.0,
                    0.0, 1.0, 0.0,
                    0.0, 1.0, 0.0,
                    0.0, 1.0, 0.0,

                    // Bottom
                    0.0, -1.0, 0.0,
                    0.0, -1.0, 0.0,
                    0.0, -1.0, 0.0,
                    0.0, -1.0, 0.0,

                    // Right
                    1.0, 0.0, 0.0,
                    1.0, 0.0, 0.0,
                    1.0, 0.0, 0.0,
                    1.0, 0.0, 0.0,

                    // Left
                    -1.0, 0.0, 0.0,
                    -1.0, 0.0, 0.0,
                    -1.0, 0.0, 0.0,
                    -1.0, 0.0, 0.0,
                ],
                indices: [
                    0, 1, 2,    0, 2, 3,    // Front
                    4, 5, 6,    4, 6, 7,    // Back
                    8, 9,10,    8,10,11,    // Top
                   12,13,14,   12,14,15,    // Bottom
                   16,17,18,   16,18,19,    // Right
                   20,21,22,   20,22,23,    // Left
                ],
                color: [0.8, 0.1, 0.1],
            },
        };

        // Create Buffer Objects
        function createBuffers(gl, geometry) {
            const positionBuffer = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geometry.positions), gl.STATIC_DRAW);

            const normalBuffer = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, normalBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geometry.normals), gl.STATIC_DRAW);

            const indexBuffer = gl.createBuffer();
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(geometry.indices), gl.STATIC_DRAW);

            return {
                position: positionBuffer,
                normal: normalBuffer,
                indices: indexBuffer,
                vertexCount: geometry.indices.length,
                color: geometry.color,
            };
        }

        const groundBuffers = createBuffers(gl, geometries.ground);
        const cubeBuffers = createBuffers(gl, geometries.cube);

        // Define Objects in the Scene
        const objects = [
            {
                buffers: groundBuffers,
                modelMatrix: mat4.create(),
                color: groundBuffers.color,
            },
            {
                buffers: cubeBuffers,
                modelMatrix: mat4.create(),
                color: cubeBuffers.color,
            },
            {
                buffers: cubeBuffers,
                modelMatrix: mat4.create(),
                color: [0.1, 0.1, 0.8],
            },
            {
                buffers: cubeBuffers,
                modelMatrix: mat4.create(),
                color: [0.1, 0.8, 0.1],
            },
        ];

        // Matrix Utility Functions
        const mat4 = {
            create: function() {
                return new Float32Array([
                    1, 0, 0, 0,
                    0, 1, 0, 0,
                    0, 0, 1, 0,
                    0, 0, 0, 1,
                ]);
            },
            translate: function(out, a, v) {
                const x = v[0], y = v[1], z = v[2];
                if (a === out) {
                    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
                    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
                    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
                    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
                } else {
                    const a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
                    const a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
                    const a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];

                    out[0] = a00;
                    out[1] = a01;
                    out[2] = a02;
                    out[3] = a03;
                    out[4] = a10;
                    out[5] = a11;
                    out[6] = a12;
                    out[7] = a13;
                    out[8] = a20;
                    out[9] = a21;
                    out[10] = a22;
                    out[11] = a23;

                    out[12] = a00 * x + a10 * y + a20 * z + a[12];
                    out[13] = a01 * x + a11 * y + a21 * z + a[13];
                    out[14] = a02 * x + a12 * y + a22 * z + a[14];
                    out[15] = a03 * x + a13 * y + a23 * z + a[15];
                }
                return out;
            },
            rotate: function(out, a, rad, axis) {
                let x = axis[0], y = axis[1], z = axis[2];
                let len = Math.hypot(x, y, z);
                if (len < 0.000001) { return null; }
                len = 1 / len;
                x *= len;
                y *= len;
                z *= len;

                const s = Math.sin(rad);
                const c = Math.cos(rad);
                const t = 1 - c;

                const a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
                const a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
                const a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];

                // Construct the elements of the rotation matrix
                const b00 = x * x * t + c,     b01 = y * x * t + z * s, b02 = z * x * t - y * s;
                const b10 = x * y * t - z * s, b11 = y * y * t + c,     b12 = z * y * t + x * s;
                const b20 = x * z * t + y * s, b21 = y * z * t - x * s, b22 = z * z * t + c;

                // Perform rotation-specific matrix multiplication
                out[0] = a00 * b00 + a10 * b01 + a20 * b02;
                out[1] = a01 * b00 + a11 * b01 + a21 * b02;
                out[2] = a02 * b00 + a12 * b01 + a22 * b02;
                out[3] = a03 * b00 + a13 * b01 + a23 * b02;
                out[4] = a00 * b10 + a10 * b11 + a20 * b12;
                out[5] = a01 * b10 + a11 * b11 + a21 * b12;
                out[6] = a02 * b10 + a12 * b11 + a22 * b12;
                out[7] = a03 * b10 + a13 * b11 + a23 * b12;
                out[8] = a00 * b20 + a10 * b21 + a20 * b22;
                out[9] = a01 * b20 + a11 * b21 + a21 * b22;
                out[10] = a02 * b20 + a12 * b21 + a22 * b22;
                out[11] = a03 * b20 + a13 * b21 + a23 * b22;
                out[12] = a[12];
                out[13] = a[13];
                out[14] = a[14];
                out[15] = a[15];
                return out;
            },
            perspective: function(out, fovy, aspect, near, far) {
                const f = 1.0 / Math.tan(fovy / 2);
                out[0] = f / aspect;
                out[1] = 0;
                out[2] = 0;
                out[3] = 0;

                out[4] = 0;
                out[5] = f;
                out[6] = 0;
                out[7] = 0;

                out[8] = 0;
                out[9] = 0;
                out[10] = (far + near) / (near - far);
                out[11] = -1;

                out[12] = 0;
                out[13] = 0;
                out[14] = (2 * far * near) / (near - far);
                out[15] = 0;
                return out;
            },
            lookAt: function(out, eye, center, up) {
                let x0, x1, x2, y0, y1, y2, z0, z1, z2, len, eyex = eye[0],
                    eyey = eye[1], eyez = eye[2],
                    upx = up[0], upy = up[1], upz = up[2],
                    centerx = center[0], centery = center[1], centerz = center[2];

                if (Math.abs(eyex - centerx) < 0.000001 &&
                    Math.abs(eyey - centery) < 0.000001 &&
                    Math.abs(eyez - centerz) < 0.000001) {
                    return this.identity(out);
                }

                z0 = eyex - centerx;
                z1 = eyey - centery;
                z2 = eyez - centerz;

                len = Math.hypot(z0, z1, z2);
                if (len === 0) {
                    z0 = 0;
                    z1 = 0;
                    z2 = 0;
                } else {
                    len = 1 / len;
                    z0 *= len;
                    z1 *= len;
                    z2 *= len;
                }

                x0 = upy * z2 - upz * z1;
                x1 = upz * z0 - upx * z2;
                x2 = upx * z1 - upy * z0;
                len = Math.hypot(x0, x1, x2);
                if (len === 0) {
                    x0 = 0;
                    x1 = 0;
                    x2 = 0;
                } else {
                    len = 1 / len;
                    x0 *= len;
                    x1 *= len;
                    x2 *= len;
                }

                y0 = z1 * x2 - z2 * x1;
                y1 = z2 * x0 - z0 * x2;
                y2 = z0 * x1 - z1 * x0;

                len = Math.hypot(y0, y1, y2);
                if (len === 0) {
                    y0 = 0;
                    y1 = 0;
                    y2 = 0;
                } else {
                    len = 1 / len;
                    y0 *= len;
                    y1 *= len;
                    y2 *= len;
                }

                out[0] = x0;
                out[1] = y0;
                out[2] = z0;
                out[3] = 0;
                out[4] = x1;
                out[5] = y1;
                out[6] = z1;
                out[7] = 0;
                out[8] = x2;
                out[9] = y2;
                out[10] = z2;
                out[11] = 0;
                out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
                out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
                out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
                out[15] = 1;

                return out;
            },
            invert: function(out, a) {
                const a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
                const a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
                const a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
                const a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

                const b00 = a00 * a11 - a01 * a10;
                const b01 = a00 * a12 - a02 * a10;
                const b02 = a00 * a13 - a03 * a10;
                const b03 = a01 * a12 - a02 * a11;
                const b04 = a01 * a13 - a03 * a11;
                const b05 = a02 * a13 - a03 * a12;
                const b06 = a20 * a31 - a21 * a30;
                const b07 = a20 * a32 - a22 * a30;
                const b08 = a20 * a33 - a23 * a30;
                const b09 = a21 * a32 - a22 * a31;
                const b10 = a21 * a33 - a23 * a31;
                const b11 = a22 * a33 - a23 * a32;

                // Calculate the determinant
                const det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

                if (!det) {
                    return null;
                }
                const invDet = 1.0 / det;

                out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
                out[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
                out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
                out[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
                out[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;
                out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
                out[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;
                out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
                out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
                out[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
                out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
                out[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
                out[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;
                out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
                out[14] = (-a30 * b04 + a31 * b01 - a32 * b00) * invDet;
                out[15] = (a20 * b04 - a21 * b01 + a22 * b00) * invDet;

                return out;
            },
            transpose: function(out, a) {
                if (out === a) {
                    let a01 = a[1], a02 = a[2], a03 = a[3];
                    let a12 = a[6], a13 = a[7];
                    let a23 = a[11];

                    out[1] = a[4];
                    out[2] = a[8];
                    out[3] = a[12];
                    out[4] = a01;
                    out[6] = a[9];
                    out[7] = a[13];
                    out[8] = a02;
                    out[9] = a12;
                    out[11] = a[14];
                    out[12] = a03;
                    out[13] = a13;
                    out[14] = a23;
                } else {
                    out[0] = a[0];
                    out[1] = a[4];
                    out[2] = a[8];
                    out[3] = a[12];
                    out[4] = a[1];
                    out[5] = a[5];
                    out[6] = a[9];
                    out[7] = a[13];
                    out[8] = a[2];
                    out[9] = a[6];
                    out[10] = a[10];
                    out[11] = a[14];
                    out[12] = a[3];
                    out[13] = a[7];
                    out[14] = a[11];
                    out[15] = a[15];
                }
                return out;
            },
            identity: function(out) {
                out[0] = 1;
                out[1] = 0;
                out[2] = 0;
                out[3] = 0;
                out[4] = 0;
                out[5] = 1;
                out[6] = 0;
                out[7] = 0;
                out[8] = 0;
                out[9] = 0;
                out[10] = 1;
                out[11] = 0;
                out[12] = 0;
                out[13] = 0;
                out[14] = 0;
                out[15] = 1;
                return out;
            },
        };

        // Initialize Pointer Lock
        function attemptPointerLock() {
            canvas.requestPointerLock = canvas.requestPointerLock ||
                                        canvas.mozRequestPointerLock ||
                                        canvas.webkitRequestPointerLock;
            if (canvas.requestPointerLock) {
                canvas.requestPointerLock();
            }
        }

        // Attempt pointer lock when the page loads
        window.onload = function() {
            attemptPointerLock();
            console.log('Attempting to engage pointer lock automatically. If mouse look is not active, please click on the canvas to enable controls.');
        };

        // Pointer Lock Change Event
        document.addEventListener('pointerlockchange', lockChangeAlert, false);
        document.addEventListener('mozpointerlockchange', lockChangeAlert, false);
        document.addEventListener('webkitpointerlockchange', lockChangeAlert, false);

        function lockChangeAlert() {
            if (document.pointerLockElement === canvas ||
                document.mozPointerLockElement === canvas ||
                document.webkitPointerLockElement === canvas) {
                console.log('Pointer Lock Engaged');
                document.addEventListener("mousemove", updateCamera, false);
            } else {
                console.log('Pointer Lock Released');
                document.removeEventListener("mousemove", updateCamera, false);
            }
        }

        // Player Variables
        const player = {
            position: [0, 1.8, 5], // Starting position (x, y, z)
            rotation: [0, 0, 0], // Rotation (pitch, yaw, roll)
        };

        // Movement Flags
        const keys = {
            forward: false,
            backward: false,
            left: false,
            right: false,
        };

        // Event Listeners for Keyboard
        document.addEventListener('keydown', function(event) {
            switch(event.code) {
                case 'KeyW':
                    keys.forward = true;
                    break;
                case 'KeyS':
                    keys.backward = true;
                    break;
                case 'KeyA':
                    keys.left = true;
                    break;
                case 'KeyD':
                    keys.right = true;
                    break;
            }
        }, false);

        document.addEventListener('keyup', function(event) {
            switch(event.code) {
                case 'KeyW':
                    keys.forward = false;
                    break;
                case 'KeyS':
                    keys.backward = false;
                    break;
                case 'KeyA':
                    keys.left = false;
                    break;
                case 'KeyD':
                    keys.right = false;
                    break;
            }
        }, false);

        // Update Camera Based on Mouse Movement
        function updateCamera(event) {
            const sensitivity = 0.002;
            const movementX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;
            const movementY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;

            player.rotation[1] -= movementX * sensitivity; // Yaw
            player.rotation[0] -= movementY * sensitivity; // Pitch

            // Limit pitch to prevent flipping
            const maxPitch = Math.PI / 2 - 0.01;
            if (player.rotation[0] > maxPitch) player.rotation[0] = maxPitch;
            if (player.rotation[0] < -maxPitch) player.rotation[0] = -maxPitch;
        }

        // Calculate View Matrix
        function getViewMatrix() {
            const pitch = player.rotation[0];
            const yaw = player.rotation[1];

            // Calculate direction vector
            const direction = [
                Math.cos(pitch) * Math.sin(yaw),
                Math.sin(pitch),
                Math.cos(pitch) * Math.cos(yaw)
            ];

            // Calculate target point
            const target = [
                player.position[0] + direction[0],
                player.position[1] + direction[1],
                player.position[2] + direction[2],
            ];

            const up = [0, 1, 0];
            const viewMatrix = mat4.create();
            mat4.lookAt(viewMatrix, player.position, target, up);
            return viewMatrix;
        }

        // Draw the Scene
        function drawScene() {
            gl.clearColor(0.5, 0.7, 1.0, 1.0); // Sky blue background
            gl.clearDepth(1.0);                 // Clear everything
            gl.enable(gl.DEPTH_TEST);           // Enable depth testing
            gl.depthFunc(gl.LEQUAL);            // Near things obscure far things

            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

            // Use the shader program
            gl.useProgram(shaderProgram);

            // Set Projection Matrix
            const fieldOfView = 60 * Math.PI / 180;   // in radians
            const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;
            const zNear = 0.1;
            const zFar = 1000.0;
            const projectionMatrix = mat4.create();
            mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);
            gl.uniformMatrix4fv(programInfo.uniformLocations.projectionMatrix, false, projectionMatrix);

            // Set View Matrix
            const viewMatrix = getViewMatrix();
            gl.uniformMatrix4fv(programInfo.uniformLocations.viewMatrix, false, viewMatrix);

            // Set Light Position
            const lightPos = [10.0, 10.0, 10.0];
            gl.uniform3fv(programInfo.uniformLocations.lightPos, lightPos);

            // Set View Position (Player's position)
            gl.uniform3fv(programInfo.uniformLocations.viewPos, player.position);

            // Set Light Color
            gl.uniform3fv(programInfo.uniformLocations.lightColor, [1.0, 1.0, 1.0]);

            // Draw Each Object
            objects.forEach(obj => {
                // Set Model Matrix
                gl.uniformMatrix4fv(programInfo.uniformLocations.modelMatrix, false, obj.modelMatrix);

                // Calculate Normal Matrix
                const normalMatrix = mat4.create();
                mat4.invert(normalMatrix, obj.modelMatrix);
                mat4.transpose(normalMatrix, normalMatrix);
                gl.uniformMatrix4fv(programInfo.uniformLocations.normalMatrix, false, normalMatrix);

                // Set Object Color
                gl.uniform3fv(programInfo.uniformLocations.objectColor, obj.color);

                // Bind Position Buffer
                gl.bindBuffer(gl.ARRAY_BUFFER, obj.buffers.position);
                gl.enableVertexAttribArray(programInfo.attribLocations.position);
                gl.vertexAttribPointer(programInfo.attribLocations.position, 3, gl.FLOAT, false, 0, 0);

                // Bind Normal Buffer
                gl.bindBuffer(gl.ARRAY_BUFFER, obj.buffers.normal);
                gl.enableVertexAttribArray(programInfo.attribLocations.normal);
                gl.vertexAttribPointer(programInfo.attribLocations.normal, 3, gl.FLOAT, false, 0, 0);

                // Bind Index Buffer
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, obj.buffers.indices);

                // Draw the object
                gl.drawElements(gl.TRIANGLES, obj.buffers.vertexCount, gl.UNSIGNED_SHORT, 0);
            });
        }

        // Animation Loop
        function animate() {
            requestAnimationFrame(animate);

            // Movement Speed
            const speed = 0.05;

            // Calculate Forward and Right Vectors
            const forward = [
                Math.cos(player.rotation[0]) * Math.sin(player.rotation[1]),
                Math.sin(player.rotation[0]),
                Math.cos(player.rotation[0]) * Math.cos(player.rotation[1])
            ];
            const right = [
                Math.sin(player.rotation[1] - Math.PI / 2),
                0,
                Math.cos(player.rotation[1] - Math.PI / 2)
            ];

            // Update Position Based on Keys Pressed
            if (keys.forward) {
                player.position[0] += forward[0] * speed;
                player.position[1] += forward[1] * speed;
                player.position[2] += forward[2] * speed;
            }
            if (keys.backward) {
                player.position[0] -= forward[0] * speed;
                player.position[1] -= forward[1] * speed;
                player.position[2] -= forward[2] * speed;
            }
            if (keys.left) {
                player.position[0] += right[0] * speed;
                player.position[1] += right[1] * speed;
                player.position[2] += right[2] * speed;
            }
            if (keys.right) {
                player.position[0] -= right[0] * speed;
                player.position[1] -= right[1] * speed;
                player.position[2] -= right[2] * speed;
            }

            drawScene();
        }

        // Initialize the Scene
        function initScene() {
            // Position the Ground (Already at origin)
            mat4.translate(objects[0].modelMatrix, mat4.create(), [0, 0, 0]);

            // Create Cubes at Different Positions
            mat4.translate(objects[1].modelMatrix, mat4.create(), [-5, 1, -5]);
            mat4.rotate(objects[1].modelMatrix, objects[1].modelMatrix, Math.PI / 4, [0, 1, 0]);

            mat4.translate(objects[2].modelMatrix, mat4.create(), [5, 1, -5]);
            mat4.rotate(objects[2].modelMatrix, objects[2].modelMatrix, -Math.PI / 4, [0, 1, 0]);

            mat4.translate(objects[3].modelMatrix, mat4.create(), [0, 1, 5]);
            // Optional: Rotate cubes or leave them static
        }

        initScene();
        animate();

        // Inform the user via console about pointer lock status
        console.log('Game started. To enable mouse look, click on the canvas if it is not active.');
    </script>
</body>
</html>
